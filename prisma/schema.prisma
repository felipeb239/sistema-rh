generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  name      String?
  email     String?
  role      String   @default("user")
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Employee {
  id             String          @id @default(cuid())
  name           String
  cpf            String?
  position       String?
  department     String?
  hireDate       DateTime?       @map("hire_date")
  salary         Decimal?        @db.Decimal(10, 2)
  status         String          @default("active")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  payrolls       Payroll[]
  receipts       Receipt[]
  employeeRubrics EmployeeRubric[]

  @@map("employees")
}

model Payroll {
  id                      String   @id @default(cuid())
  employeeId              String   @map("employee_id")
  month                   Int
  year                    Int
  baseSalary              Decimal  @map("base_salary") @db.Decimal(10, 2)
  inssDiscount            Decimal  @default(0) @map("inss_discount") @db.Decimal(10, 2)
  irrfDiscount            Decimal  @default(0) @map("irrf_discount") @db.Decimal(10, 2)
  healthInsurance         Decimal  @default(0) @map("health_insurance") @db.Decimal(10, 2)
  dentalInsurance         Decimal  @default(0) @map("dental_insurance") @db.Decimal(10, 2)
  customDiscount          Decimal  @default(0) @map("custom_discount") @db.Decimal(10, 2)
  customDiscountDescription String? @map("custom_discount_description")
  otherDiscounts          Decimal  @default(0) @map("other_discounts") @db.Decimal(10, 2)
  grossSalary             Decimal  @map("gross_salary") @db.Decimal(10, 2)
  netSalary               Decimal  @map("net_salary") @db.Decimal(10, 2)
  fgtsAmount              Decimal  @default(0) @map("fgts_amount") @db.Decimal(10, 2)
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  employee                Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, month, year], name: "employeeId_month_year")
  @@map("payrolls")
}

model CompanySettings {
  id          String   @id @default(cuid())
  companyName String   @map("company_name")
  cnpj        String?
  address     String?
  city        String?
  state       String?
  zipCode     String?  @map("zip_code")
  phone       String?
  email       String?
  website     String?
  logo        String?
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("company_settings")
}

model ReceiptType {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  receipts    Receipt[]

  @@map("receipt_types")
}

model Receipt {
  id         String     @id @default(cuid())
  employeeId String     @map("employee_id")
  typeId     String     @map("type_id")
  month      Int
  year       Int
  dailyValue Decimal    @map("daily_value") @db.Decimal(10, 2)
  days       Int
  value      Decimal    @db.Decimal(10, 2)
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  employee   Employee   @relation(fields: [employeeId], references: [id])
  type       ReceiptType @relation(fields: [typeId], references: [id])

  @@map("receipts")
}

model Alert {
  id        String   @id @default(cuid())
  type      String
  message   String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("alerts")
}

model Position {
  id   String @id @default(cuid())
  name String @unique

  @@map("positions")
}

model PayrollRubric {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String          // 'discount' or 'benefit'
  code           String?         // CÃ³digo da rubrica (ex: 2801, 3405)
  isActive       Boolean         @default(true) @map("is_active")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  employeeRubrics EmployeeRubric[]

  @@map("payroll_rubrics")
}

model EmployeeRubric {
  id              String        @id @default(cuid())
  employeeId      String        @map("employee_id")
  rubricId        String        @map("rubric_id")
  customName      String?       @map("custom_name")
  customValue     Decimal?      @map("custom_value") @db.Decimal(10, 2)
  customPercentage Decimal?     @map("custom_percentage") @db.Decimal(5, 4)
  isActive        Boolean       @default(true) @map("is_active")
  startDate       DateTime?     @map("start_date")
  endDate         DateTime?     @map("end_date")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  employee        Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  rubric          PayrollRubric @relation(fields: [rubricId], references: [id], onDelete: Cascade)

  @@unique([employeeId, rubricId], name: "employee_rubric_unique")
  @@map("employee_rubrics")
}
